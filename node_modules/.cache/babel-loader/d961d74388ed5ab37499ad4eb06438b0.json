{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nikhi\\\\Desktop\\\\Projects\\\\ReactRouter\\\\src\\\\components\\\\quotes\\\\QuoteList.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuoteList = props => {\n  _s();\n\n  const history = useHistory();\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const isSortedAscending = queryParams.get('sort') === 'asc';\n  const sortedQuotes = sortQuotes(props.quotes, isSortedAscending);\n\n  const sortHandler = () => {\n    history.push('/quotes?sort=' + (isSortedAscending ? 'desc' : 'asc'));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sortHandler,\n        children: \"Sort \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: props.quotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(QuoteList, \"azjqGSEfmvz5+G/YRUZm7OceOpI=\", false, function () {\n  return [useHistory, useLocation];\n});\n\n_c = QuoteList;\nexport default QuoteList;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"sources":["C:/Users/nikhi/Desktop/Projects/ReactRouter/src/components/quotes/QuoteList.js"],"names":["Fragment","useHistory","useLocation","QuoteItem","classes","QuoteList","props","history","location","queryParams","URLSearchParams","search","isSortedAscending","get","sortedQuotes","sortQuotes","quotes","sortHandler","push","sorting","list","map","quote","id","author","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,EAAsBC,WAAtB,QAAyC,cAAzC;AAEA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;;AAGA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAE3B,QAAMC,OAAO,GAAGN,UAAU,EAA1B;AACA,QAAMO,QAAQ,GAAGN,WAAW,EAA5B;AAEA,QAAMO,WAAW,GAAG,IAAIC,eAAJ,CAAoBF,QAAQ,CAACG,MAA7B,CAApB;AAEA,QAAMC,iBAAiB,GAAGH,WAAW,CAACI,GAAZ,CAAgB,MAAhB,MAA0B,KAApD;AAEA,QAAMC,YAAY,GAAGC,UAAU,CAACT,KAAK,CAACU,MAAP,EAAgBJ,iBAAhB,CAA/B;;AAEA,QAAMK,WAAW,GAAG,MACpB;AACEV,IAAAA,OAAO,CAACW,IAAR,CAAa,mBAAiBN,iBAAiB,GAAG,MAAH,GAAY,KAA9C,CAAb;AACD,GAHD;;AAIA,sBACE,QAAC,QAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAIR,OAAO,CAACe,OAA1B;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAEF,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAI,MAAA,SAAS,EAAEb,OAAO,CAACgB,IAAvB;AAAA,gBACGd,KAAK,CAACU,MAAN,CAAaK,GAAb,CAAkBC,KAAD,iBAChB,QAAC,SAAD;AAEE,QAAA,EAAE,EAAEA,KAAK,CAACC,EAFZ;AAGE,QAAA,MAAM,EAAED,KAAK,CAACE,MAHhB;AAIE,QAAA,IAAI,EAAEF,KAAK,CAACG;AAJd,SACOH,KAAK,CAACC,EADb;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAhCD;;GAAMlB,S;UAEYJ,U,EACCC,W;;;KAHbG,S;AAkCN,eAAeA,SAAf","sourcesContent":["import { Fragment } from 'react';\nimport { useHistory , useLocation } from 'react-router';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\n\nconst QuoteList = (props) => {\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const queryParams = new URLSearchParams(location.search);\n\n  const isSortedAscending = queryParams.get('sort')==='asc';\n\n  const sortedQuotes = sortQuotes(props.quotes , isSortedAscending);\n\n  const sortHandler = () =>\n  {\n    history.push('/quotes?sort='+(isSortedAscending ? 'desc' : 'asc'));\n  }\n  return (\n    <Fragment>\n      <div className = {classes.sorting}>\n        <button onClick={sortHandler}>Sort </button>\n        </div>\n      <ul className={classes.list}>\n        {props.quotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n"]},"metadata":{},"sourceType":"module"}