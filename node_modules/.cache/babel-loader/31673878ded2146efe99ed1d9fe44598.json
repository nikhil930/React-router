{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nikhi\\\\Desktop\\\\Projects\\\\ReactRouter\\\\src\\\\components\\\\comments\\\\Comments.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { useEffect } from 'react/cjs/react.development';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = () => {\n  _s();\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const {\n    quoteId\n  } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedComments\n  } = useHttp(getAllComments);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  let Comments;\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === 'pending') {\n    Comments = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 14\n    }, this);\n  } else if (status === 'completed' && loadedComments && loadedComments.length > 0) {\n    Comments = loadedComments;\n  } else if (status === 'completed' && !loadedComments) {\n    Comments = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: \"No Comments found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 14\n    }, this);\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: classes.comments,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), !isAddingComment && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: startAddCommentHandler,\n      children: \"Add a Comment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), isAddingComment && /*#__PURE__*/_jsxDEV(NewCommentForm, {\n      quoteId: quoteId,\n      onAddComment: addCommentHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 27\n    }, this), Comments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"guVA/3hbgGgqjDiXx683cm2XfUc=\", false, function () {\n  return [useParams, useHttp];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["C:/Users/nikhi/Desktop/Projects/ReactRouter/src/components/comments/Comments.js"],"names":["useState","useCallback","useParams","useEffect","useHttp","getAllComments","LoadingSpinner","classes","NewCommentForm","Comments","isAddingComment","setIsAddingComment","params","quoteId","sendRequest","status","data","loadedComments","addCommentHandler","length","startAddCommentHandler","comments"],"mappings":";;;AAAA,SAASA,QAAT,EAAoBC,WAApB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AAEA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAMY,MAAM,GAACV,SAAS,EAAtB;AACA,QAAK;AAACW,IAAAA;AAAD,MAAUD,MAAf;AACA,QAAM;AAACE,IAAAA,WAAD;AAAeC,IAAAA,MAAf;AAAwBC,IAAAA,IAAI,EAACC;AAA7B,MAA+Cb,OAAO,CAACC,cAAD,CAA5D;AAEAF,EAAAA,SAAS,CAAC,MAAI;AACZW,IAAAA,WAAW,CAACD,OAAD,CAAX;AACD,GAFQ,EAEP,CAACC,WAAD,EAAeD,OAAf,CAFO,CAAT;AAIA,MAAIJ,QAAJ;AACA,QAAMS,iBAAiB,GAAGjB,WAAW,CAAC,MAAK;AACzCa,IAAAA,WAAW,CAACD,OAAD,CAAX;AACD,GAFoC,EAEnC,CAACC,WAAD,EAAeD,OAAf,CAFmC,CAArC;;AAIA,MAAGE,MAAM,KAAG,SAAZ,EACA;AACEN,IAAAA,QAAQ,gBAAC;AAAA,6BAAK,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YAAT;AACD,GAHD,MAIK,IAAGM,MAAM,KAAG,WAAT,IAAwBE,cAAxB,IAA0CA,cAAc,CAACE,MAAf,GAAwB,CAArE,EACL;AACEV,IAAAA,QAAQ,GAACQ,cAAT;AACD,GAHI,MAIA,IAAIF,MAAM,KAAG,WAAT,IAAwB,CAACE,cAA7B,EACL;AACER,IAAAA,QAAQ,gBAAC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAT;AACD;;AAED,QAAMW,sBAAsB,GAAG,MAAM;AACnCT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAKA,sBACE;AAAS,IAAA,SAAS,EAAEJ,OAAO,CAACc,QAA5B;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEG,CAACX,eAAD,iBACC;AAAQ,MAAA,SAAS,EAAC,KAAlB;AAAwB,MAAA,OAAO,EAAEU,sBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAOGV,eAAe,iBAAI,QAAC,cAAD;AAAiB,MAAA,OAAO,EAAEG,OAA1B;AAAmC,MAAA,YAAY,EAAEK;AAAjD;AAAA;AAAA;AAAA;AAAA,YAPtB,EAQGT,QARH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA7CD;;GAAMA,Q;UAESP,S,EAEwCE,O;;;KAJjDK,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import { useState , useCallback } from 'react';\nimport { useParams } from 'react-router';\nimport { useEffect } from 'react/cjs/react.development';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params=useParams();\n  const{quoteId}=params;\n  const {sendRequest , status , data:loadedComments} = useHttp(getAllComments);\n\n  useEffect(()=>{\n    sendRequest(quoteId);\n  },[sendRequest , quoteId]);\n\n  let Comments;\n  const addCommentHandler = useCallback(()=> {\n    sendRequest(quoteId)\n  },[sendRequest , quoteId]);\n\n  if(status==='pending')\n  {\n    Comments=<div><LoadingSpinner /></div>\n  }\n  else if(status==='completed' && loadedComments && loadedComments.length > 0 )\n  {\n    Comments=loadedComments;\n  }\n  else if (status==='completed' && !loadedComments  )\n  {\n    Comments=<div className='centered'>No Comments found.</div>\n  }\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm  quoteId={quoteId} onAddComment={addCommentHandler}/>}\n      {Comments}\n    </section>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}